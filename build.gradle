/**
 * Gradle build script.
 *
 * Custom gradle tasks:
 *   zip     - Builds the BeanIO zip distribution
 *   site    - Builds the BeanIO site distribution
 *
 * See the following URL for instructions regarding deployment to the Sonatype Maven repo:
 *   https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
 *
 * BeanIO 3.x and up is built using Java 11, with Java 8 source/target compatibility.
 *
 * To execute the 'uploadArchives' task, the following properties must be specified
 * in an external 'gradle.properties' file:
 *   - (signing properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html)
 *   - sonatypeUsername
 *   - sonatypePassword
 */

plugins {
    id 'java'
    id 'groovy'

    id 'maven-publish'
    id 'signing'

    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.5'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.5'
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.23'
    testRuntimeOnly group: 'commons-logging', name: 'commons-logging', version: '1.3.2'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
            exclude '**/*.java'
        }
    }
    test {
        java {
            srcDir 'test'
            include '**/*.java'
        }
        groovy {
            srcDir 'test'
            include '**/*.groovy'
        }
        resources {
            srcDir 'test'
            exclude '**/*.java'
            exclude '**/*.groovy'
        }
    }
}

compileJava {
    options.release = 8
}

compileTestGroovy {
    options.release = 8
}

javadoc {
    options.header = "BeanIO $version"
    options.docTitle = "<h2>BeanIO 3 API</h2>"
    options.footer = "<i>Copyright &copy; 2010-2024 Kevin Seim and BeanIO contributors</i>"
    options.links = [
        "http://download.oracle.com/javase/8/docs/api/"
    ]
}

jar {
    includeEmptyDirs = false

    // create a list of exported packages for OSGi
    ant.dirset(id:"osgi.dirs", dir:"src/org/beanio", excludes: "xsd/**")
    ant.pathconvert(refid:"osgi.dirs", property:"osgi.packages", dirsep:".", pathsep:";version=\"${project.version}\",") {
        map(from:"$basedir/src/", to:"")
    }
    manifest {
        attributes(
            "Implementation-Title": "BeanIO ${project.version}",
            "Implementation-Version": project.version,
            "Bundle-ManifestVersion": "2",
            "Bundle-Name": "BeanIO",
            "Bundle-SymbolicName": project.group,
            "Bundle-Version": project.version,
            "Bundle-Vendor": "Kevin Seim",
            "Bundle-Description": "BeanIO OSGi support",
            "Bundle-License": "http://www.apache.org/licenses/LICENSE-2.0",
            "Bundle-DocURL": "https://beanio.github.io",
            "Automatic-Module-Name" : project.group,
            "Export-Package": ant.properties["osgi.packages"] + ";version=\"${project.version}\"",
            "DynamicImport-Package": "*")
    }
    doLast {
        manifest.writeTo("$buildDir/tmp/jar/MANIFEST.MF")
    }
}

test {
    jvmArgs = ["-Duser.country=US", "-Duser.language=en"]
}

task sourcesJar(type: Jar, dependsOn:classes) {
    archiveClassifier.set('sources')
    from("$projectDir/src")
    manifest {
        attributes(
            "Implementation-Title": "BeanIO ${project.version}",
            "Implementation-Version": project.version
        )
    }
    metaInf {
        from("$projectDir") {
            include "LICENSE.txt"
            include "NOTICE.txt"
        }
    }
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    manifest {
        attributes(
            "Implementation-Title": "BeanIO ${project.version}",
            "Implementation-Version": project.version
        )
    }
    metaInf {
        from("$projectDir") {
            include "LICENSE.txt"
            include "NOTICE.txt"
        }
    }
}

task zip(type: Zip, dependsOn: [javadoc, jar] ) {
    from jar.archiveFile
    from(javadoc.destinationDir) {
        into "docs/api"
    }
    from("$projectDir") {
        include "docs/**"
        include "src/**"
        include "test/**"
        include "*.txt"
        include "*.xml"
        include "*.properties"
        include "build.gradle"
    }
}

task site(type: Tar, dependsOn: javadoc) {
    archiveClassifier = "site"
    archiveVersion = ""
    compression Compression.GZIP
    from(javadoc.destinationDir) {
        into "3.0/docs/api"
    }
    from ("$projectDir/docs") {
        into "3.0/docs"
    }
    from("$projectDir/site")
    from("$projectDir/src/org/beanio/xsd") {
        include "2012/**"
    }
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

signing {
    afterEvaluate { project ->
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotRepo : releaseRepo

            credentials {
                username = project.hasProperty('sonatypeUsername') ? sonatypeUsername : "Unknown user"
                password = project.hasProperty('sonatypePassword') ? sonatypePassword : "Unknown password"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId = project.group
                name = project.name
                description = 'A Java un/marshalling library for CSV, XML, Delimited, Fixed length and Excel stream formats.'
                url = 'https://beanio.github.io/'

                from components.java
                artifact sourcesJar
                artifact javadocJar

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:beanio/beanio.git'
                    developerConnection = 'scm:git:git@github.com:beanio/beanio.git'
                    url = 'https://github.com/beanio/beanio/'
                }
                developers {
                    developer {
                        id = 'kevinseim'
                        name = 'Kevin Seim'
                    }
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "beanio"
        property "sonar.organization", "beanio"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
