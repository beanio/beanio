<?xml version='1.0' encoding='UTF-8' ?>
<!-- 
    Copyright 2010-2012 Kevin Seim

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
       http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project name="beanio" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
 
  <!-- Load build properties -->
  <property file="build.properties" />

  <!-- Load Maven Ant tasks -->
  <path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.1.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
    uri="antlib:org.apache.maven.artifact.ant"
  	classpathref="maven-ant-tasks.classpath" />
	
  <!-- Delete all build artifacts -->
  <target name="clean" description="Delete all build artifacts">
    <delete dir="${target}" />
  </target>

  <target name="init">
    <tstamp />
    <!-- create the build directory -->
    <mkdir dir="${target}" />
    <property name="classes.main" location="${target}/classes/main" />
    <property name="classes.test" location="${target}/classes/test" />
    <property name="classes.emma" location="${target}/classes/emma" />
    <!-- main classpath -->
	<path id="classpath.main">
	  <fileset dir="lib">
	    <include name="*.jar" />
	  </fileset>
	</path>
  </target>

  <!-- Compile main source files (src -> target/classes/main) -->
  <target name="compile" depends="init" description="Compiles Java source files under src/">
    <mkdir dir="${classes.main}" />
    <javac srcdir="src" destdir="${classes.main}" includeantruntime="false" 
      debug="true" source="1.5" target="1.5" classpathref="classpath.main" />
  </target>

  <!-- Create the beanio jar -->
  <target name="jar" depends="compile" description="Creates beanio.jar">
    
    <!-- Format the OSGi Export-Package manifiest header -->
    <dirset id="osgi.dirs" dir="src/org/beanio">
      <exclude name="xsd"/>
      <exclude name="xsd/2012"/>
      <exclude name="xsd/2011"/>
    </dirset>
    <pathconvert refid="osgi.dirs" property="osgi.packages" dirsep="." pathsep=';version="${version}",'>
      <map from="${basedir}/src/" to=""/>
    </pathconvert>
    <property name="osgi.export-package" value='${osgi.packages};version="${version}"' />
    
    <jar destfile="${target}/beanio.jar">
      <manifest>
        <attribute name="Implementation-Title" value="BeanIO ${version}" />
        <attribute name="Implementation-Version" value="${version}" />
    	<!-- OSGi manifest headers -->
        <attribute name="Bundle-ManifestVersion" value="2"/>
        <attribute name="Bundle-Vendor" value="Kevin Seim"/>
        <attribute name="Bundle-Name" value="BeanIO"/>
        <attribute name="Bundle-Description" value="BeanIO OSGi support"/>
        <attribute name="Bundle-SymbolicName" value="org.beanio"/>
        <attribute name="Bundle-Version" value="${version}"/>
        <attribute name="Bundle-License" value="http://www.apache.org/licenses/LICENSE-2.0"/>
        <attribute name="Bundle-DocURL" value="http://beanio.org"/>
        <attribute name="Export-Package" value="${osgi.export-package}"/>
        <attribute name="DynamicImport-Package" value="*"/>
      </manifest>
      <metainf dir="${basedir}">
        <include name="LICENSE.txt" />
        <include name="NOTICE.txt" />
      </metainf>
      <fileset dir="${classes.main}" />
      <fileset dir="src">
        <exclude name="**/*.java" />
        <exclude name="**/package.html" />
      </fileset>
    </jar>
  </target>

  <!-- Creates docs related directories -->
  <target name="docs-init" depends="init">
    <delete dir="${target}/docs" />
    <mkdir dir="${target}/docs/api" />
  </target>
  <!-- Create API documentation -->
  <target name="docs-api" depends="docs-init">
    <javadoc sourcepath="src" destdir="${target}/docs/api" windowtitle="BeanIO 2.0 API" access="protected"
      header="BeanIO ${version}" classpathref="classpath.main">
      <doctitle><![CDATA[<h2>BeanIO 2.0 API</h2>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &copy; 2010-2012 Kevin Seim</i>]]></bottom>
      <link href="http://download.oracle.com/javase/6/docs/api/" />
      <link href="http://static.springsource.org/spring-batch/apidocs/" />
      <link href="http://static.springsource.org/spring/docs/2.5.x/api/" />
    </javadoc>
  </target>
  <target name="docs" depends="docs-init,docs-api" 
    description="Runs javadoc for Java source file under src/" />

  <!-- Create the release ZIP -->
  <target name="package" depends="jar,docs" description="Creates the release ZIP">
	<property name="parent" value="beanio-${version}" />
	<zip destfile="${target}/beanio-${version}.zip">
	  <zipfileset dir="${target}" prefix="${parent}">
	    <include name="beanio.jar" />
	    <include name="docs/**" />
	  </zipfileset>
	  <zipfileset dir="${basedir}" prefix="${parent}">
	    <include name="docs/**" />
	    <include name="src/**" />
	    <include name="test/**" />
	    <include name="*.txt" />
	    <include name="*.xml" />
	    <include name="*.properties" />
	  </zipfileset>
	</zip>
  </target>
  
  <!-- Create website tar -->
  <target name="site" depends="init,docs" description="Create site tar">
    <tar destfile="${target}/beanio-site.tar.gz" compression="gzip">
      <tarfileset prefix="2.0/" dir="${basedir}">
        <include name="docs/**" />
      </tarfileset>
      <tarfileset prefix="2.0/" dir="${target}">
        <include name="docs/**" />
      </tarfileset>    
      <tarfileset dir="${basedir}/site">
        <include name="**/*" />
      </tarfileset>
      <tarfileset dir="${basedir}/src/org/beanio/xsd">
        <include name="2012/**" />
      </tarfileset>
    </tar>
  </target>

  <!-- Prepare for test execution -->
  <target name="test-init" depends="init">
    <path id="classpath.test">
      <pathelement location="${target}/beanio.jar" />
      <pathelement location="${classes.test}" />
      <pathelement location="test" />
      <fileset dir="lib">
        <include name="*.jar" />
      </fileset>
    </path>

    <!-- Compile test classes -->
    <mkdir dir="${classes.test}" />
    <javac srcdir="test" destdir="${classes.test}" debug="true" includeAntRuntime="false" classpathref="classpath.test" />

    <property name="junit.report.dir" value="${target}/report/junit" />
    <delete dir="${junit.report.dir}" failonerror="false" />
    <mkdir dir="${junit.report.dir}" />

    <condition property="flag.emma">
      <and>
        <istrue value="${emma.enabled}" />
      </and>
    </condition>
  </target>

  <!-- Run JUnit without capturing coverage -->
  <target name="test-junit" depends="test-init" unless="flag.emma">
    <junit printsummary="true" fork="true" forkmode="once" haltonfailure="true">
      <formatter type="plain" />
      <classpath refid="classpath.test" />
      <batchtest fork="true" todir="${junit.report.dir}">
        <fileset dir="test">
          <include name="**/*Test.java" />
          <exclude name="org/beanio/parser/ParserTest.java" />
          <exclude name="org/beanio/parser/xml/XmlParserTest.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Run JUnit while monitoring code coverage with Emma -->
  <target name="test-emma" depends="test-init" if="flag.emma">
    <mkdir dir="${target}/classes/emma" />
    <mkdir dir="${target}/report/emma" />

    <path id="emma.lib">
      <fileset dir="lib">
        <include name="emma*.jar" />
      </fileset>
    </path>
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

    <!-- Instrument the Java classes using Emma -->
    <path id="main">
      <pathelement location="${target}/classes/main" />
    </path>
    <emma enabled="true">
      <instr instrpathref="main" destdir="${target}/classes/emma" metadatafile="${target}/report/emma/metadata.emma" merge="true" />
    </emma>

    <!-- Add the instrumented classes to the test classpath -->
    <path id="classpath.test.emma">
      <pathelement location="${target}/classes/emma" />
      <path refid="classpath.test" />
    </path>

    <!-- Run the JUnit test cases -->
    <junit printsummary="true" fork="true" forkmode="once" haltonfailure="true">
      <formatter type="plain" />
      <classpath refid="classpath.test.emma" />
      <jvmarg value="-Demma.coverage.out.file=${target}/report/emma/coverage.emma" />
      <jvmarg value="-Demma.coverage.out.merge=true" />
      <batchtest fork="true" todir="${junit.report.dir}">
        <fileset dir="test">
          <include name="**/*Test.java" />
          <exclude name="org/beanio/parser/ParserTest.java" />
          <exclude name="org/beanio/parser/xml/XmlParserTest.java" />
        </fileset>
      </batchtest>
    </junit>

    <!-- Create the coverage report -->
    <emma enabled="true">
      <report sourcepath="src">
        <fileset dir="${target}/report/emma">
          <include name="*.emma" />
        </fileset>
        <html outfile="${target}/report/emma/coverage.html" />
      </report>
    </emma>
  </target>

  <!-- Create beanio JAR's for a Maven repository -->
  <target name="maven-jars" depends="jar,docs-api" description="Creates Maven repository JAR's">
  	<property name="maven.jar" value="${target}/${maven.artifactId}-${version}.jar" />
  	<property name="maven.sources.jar" value="${target}/${maven.artifactId}-${version}-sources.jar" />
  	<property name="maven.javadoc.jar" value="${target}/${maven.artifactId}-${version}-javadoc.jar" />
  	<copy file="${target}/beanio.jar" toFile="${maven.jar}" />
    <jar destfile="${maven.sources.jar}">
      <manifest>
        <attribute name="Implementation-Title" value="BeanIO ${version}" />
        <attribute name="Implementation-Version" value="${version}" />
      </manifest>
      <metainf dir="${basedir}">
        <include name="LICENSE.txt" />
        <include name="NOTICE.txt" />
      </metainf>    	
      <fileset dir="src">
      	<exclude name="**/package.html" />
      </fileset>
    </jar>
    <jar destfile="${maven.javadoc.jar}">
      <manifest>
        <attribute name="Implementation-Title" value="BeanIO ${version}" />
        <attribute name="Implementation-Version" value="${version}" />
      </manifest>
      <metainf dir="${basedir}">
        <include name="LICENSE.txt" />
        <include name="NOTICE.txt" />
      </metainf>  
      <fileset dir="${target}/docs/api" />
    </jar>
  </target>
	
  <!-- Deploy Maven beanio JAR's to the configured repository -->
  <target name="maven-deploy" depends="maven-jars" description="Deploy to Maven repository">
    <!-- sign and deploy the main artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven.repository.url}" />
      <arg value="-DrepositoryId=${maven.repository.id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dversion=${version}" />
      <arg value="-Dfile=${maven.jar}" />
	  <arg value="-Pgpg" />
    </artifact:mvn>
    <!-- sign and deploy the sources artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven.repository.url}" />
      <arg value="-DrepositoryId=${maven.repository.id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dversion=${version}" />
      <arg value="-Dfile=${maven.sources.jar}" />
      <arg value="-Dclassifier=sources" />
	  <arg value="-Pgpg" />
    </artifact:mvn>
    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven.repository.url}" />
      <arg value="-DrepositoryId=${maven.repository.id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dversion=${version}" />
      <arg value="-Dfile=${maven.javadoc.jar}" />
      <arg value="-Dclassifier=javadoc" />
	  <arg value="-Pgpg" />
    </artifact:mvn>
  </target>
	
  <target name="test" depends="compile,jar,test-init,test-junit,test-emma"
    description="Executes JUnit test cases, generates Emma converage report if enabled" />
  <target name="build" depends="compile,jar,docs,package" />

</project>